
# Temperature sensor daemon (root process)
type thermald, domain;
type thermald_exec, exec_type, file_type;

# Started by init
init_daemon_domain(thermald)

# DAC overrides
allow thermald self:capability dac_override;
auditallow thermald self:capability dac_override;

allow thermald self:socket create_socket_perms;
allowxperm thermald self:socket ioctl msm_sock_ipc_ioctls;

# CPU hotplug uevent
allow thermald self:netlink_kobject_uevent_socket { create setopt bind read };
allow thermald self:capability net_admin;

# Talk to qmuxd (/dev/socket/qmux_radio)
qmux_socket(thermald)

# Access shared logger (/dev/smem_log)
#allow thermald shared_log_device:chr_file rw_file_perms;

# Access /sys/devices/system/cpu/
allow thermald sysfs_devices_system_cpu:file rw_file_perms;

# Access leds
r_dir_file(thermald, sysfs_leds);

# Some files in /sys/devices/system/cpu may pop in and out of existance,
# defeating our attempt to label them. As a result, they could have the
# sysfs label, not the sysfs_devices_system_cpu label.
# Allow read/write access for now until we figure out a better solution.
# For example, the following files pop in and out of existance:
# /sys/devices/system/cpu/cpu1/cpufreq/cpuinfo_min_freq
# /sys/devices/system/cpu/cpu1/cpufreq/scaling_min_freq
allow thermald sysfs:file rw_file_perms;
allow thermald sysfs:dir r_dir_perms;

# Access /sys/devices/platform/kgsl-3d0.0/kgsl/kgsl-3d0/max_gpuclk
allow thermald sysfs_thermal:file rw_file_perms;

# Connect to mpdecision.
allow thermald mpdecision_socket:dir r_dir_perms;
unix_socket_connect(thermald, mpdecision, mpdecision)



# Grant access to Qualcomm MSM Interface (QMI) radio sockets to RILD
qmux_socket(rild)



# Qualcomm MSM camera
type camera, domain;
type camera_exec, exec_type, file_type;

# Started by init
init_daemon_domain(camera)

# for libmmjpeg
allow camera vendor_file:file execmod;

# Interact with other media devices
allow camera video_device:dir search;
allow camera { gpu_device video_device ion_device }:chr_file rw_file_perms;
allow camera { surfaceflinger mediaserver cameraserver untrusted_app_25 }:fd use;

# Create front and back camera sockets (/data/cam_socket[01])
type_transition camera system_data_file:sock_file camera_socket "cam_socket0";
type_transition camera system_data_file:sock_file camera_socket "cam_socket1";
allow camera camera_socket:sock_file { create unlink };
allow camera system_data_file:dir w_dir_perms;
allow camera system_data_file:sock_file unlink;

type_transition camera system_data_file:file camera_data_file "fdAlbum";
allow camera camera_data_file:file create_file_perms;

allow camera gpu_device:chr_file rw_file_perms;

# Connect to sensor socket (/data/app/sensor_ctl_socket)
unix_socket_connect(camera, sensors, sensors)
allow camera sensors_socket:sock_file read;

# Interact with /data
allow camera apk_data_file:dir rw_dir_perms;
allow camera storage_file:dir rw_dir_perms;
allow camera storage_file:lnk_file rw_file_perms;
allow camera mnt_user_file:dir rw_dir_perms;
allow camera fuse:dir rw_dir_perms;
